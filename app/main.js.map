{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"electron\"","webpack:///external \"path\"","webpack:///external \"url\"","webpack:///external \"electron-window-state\"","webpack:///external \"fs\"","webpack:///external \"os\"","webpack:///external \"wurl\"","webpack:///./src/helpers.js","webpack:///./src/trayIcon.js","webpack:///./src/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","require","INJECT_CSS_PATH","_path2","default","join","__dirname","isWindows","_os2","platform","isOSX","isLinux","linkIsInternal","currentUrl","newUrl","internalUrlRegex","RegExp","test","_wurl2","getCssToInject","_fs2","readFileSync","toString","debugLog","browserWindow","message","setTimeout","webContents","send","console","info","shouldInjectCss","accessSync","F_OK","e","getAppIcon","iconPath","log","app","Tray","Menu","nativeImage","ipcMain","mainWindow","nimage","createFromPath","tray","onClick","isVisible","hide","show","contextMenu","buildFromTemplate","label","click","exit","on","setHighlightMode","setContextMenu","BrowserWindow","mainWindowState","_electronWindowState2","defaultWidth","defaultHeight","width","height","webPreferences","nodeIntegration","preload","loadURL","manage","_trayIcon2","process","quit"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","module.exports = require(\"electron\");","module.exports = require(\"path\");","module.exports = require(\"url\");","module.exports = require(\"electron-window-state\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"wurl\");","import wurl from 'wurl';\nimport os from 'os';\nimport fs from 'fs';\nimport path from 'path';\n\nconst INJECT_CSS_PATH = path.join(__dirname, '..', 'inject/inject.css');\n\nfunction isOSX() {\n    return os.platform() === 'darwin';\n}\n\nfunction isLinux() {\n    return os.platform() === 'linux';\n}\n\nfunction isWindows() {\n    return os.platform() === 'win32';\n}\n\nfunction linkIsInternal(currentUrl, newUrl, internalUrlRegex) {\n    if (internalUrlRegex) {\n        const regex = RegExp(internalUrlRegex);\n        return regex.test(newUrl);\n    }\n\n    const currentDomain = wurl('domain', currentUrl);\n    const newDomain = wurl('domain', newUrl);\n    return currentDomain === newDomain;\n}\n\nfunction shouldInjectCss() {\n    try {\n        fs.accessSync(INJECT_CSS_PATH, fs.F_OK);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction getCssToInject() {\n    return fs.readFileSync(INJECT_CSS_PATH).toString();\n}\n\n/**\n * Helper method to print debug messages from the main process in the browser window\n * @param {BrowserWindow} browserWindow\n * @param message\n */\nfunction debugLog(browserWindow, message) {\n    // need the timeout as it takes time for the preload javascript to be loaded in the window\n    setTimeout(() => {\n        browserWindow.webContents.send('debug', message);\n    }, 3000);\n    console.info(message);\n}\n\nfunction getAppIcon() {\n    const iconPath = path.join(__dirname, '../build', `icon.${isWindows() ? 'ico' : 'png'}`);\n    console.log(`icon path = ${iconPath}`);\n    return iconPath;\n}\n\nexport default {\n    isOSX,\n    isLinux,\n    isWindows,\n    linkIsInternal,\n    getCssToInject,\n    debugLog,\n    shouldInjectCss,\n    getAppIcon,\n};\n","import helpers from './helpers';\nimport path from 'path';\n\nconst {\n    app, Tray, Menu, ipcMain, nativeImage,\n} = require('electron');\n\nconst {getAppIcon} = helpers;\n\nfunction createTrayIcon(mainWindow) {\n    const iconPath = getAppIcon();\n    const nimage = nativeImage.createFromPath(iconPath);\n    const tray = new Tray(nimage);\n\n    const onClick = () => {\n        if (mainWindow.isVisible()) {\n            mainWindow.hide();\n        } else {\n            mainWindow.show();\n        }\n    };\n\n    // const onNewNote = () => {\n    //     if (!mainWindow.isVisible()) {\n    //         mainWindow.show();\n    //     }\n    //\n    //     console.info('sending renderer process a command of creating a new note');\n    //     mainWindow.webContents.send('new-note');\n    // };\n\n    const contextMenu = Menu.buildFromTemplate([\n        {\n            label: 'Open iCloud Notes',\n            click: onClick,\n        },\n        // {\n        //     label: 'New Note',\n        //     click: onNewNote,\n        // },\n        {\n            label: 'Quit',\n            click: app.exit,\n        },\n    ]);\n\n    tray.on('click', onClick);\n\n    mainWindow.on('show', () => {\n        tray.setHighlightMode('always');\n    });\n\n    mainWindow.on('hide', () => {\n        tray.setHighlightMode('never');\n    });\n\n    tray.setContextMenu(contextMenu);\n    return tray;\n}\n\nexport default createTrayIcon;\n","// Module to control application life.\n// Module to create native browser window.\nimport createTrayIcon from \"./trayIcon\";\nimport windowStateKeeper from 'electron-window-state';\n\nconst {app, BrowserWindow} = require('electron');\nconst path = require('path');\nconst url = require('url');\n\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the JavaScript object is garbage collected.\nlet mainWindow;\nlet tray;\n\nfunction createWindow () {\n    const mainWindowState = windowStateKeeper({\n        defaultWidth: 1200,\n        defaultHeight: 800,\n    });\n\n    // Create the browser window.\n    mainWindow = new BrowserWindow({\n        width: mainWindowState.width,\n        height: mainWindowState.height,\n        webPreferences: {\n            nodeIntegration: false,\n            preload: __dirname + '/preload.js'\n        }\n    });\n\n    // and load the index.html of the app.\n    // mainWindow.loadURL('http://localhost:3000');\n    mainWindow.loadURL('https://www.icloud.com/#notes2');\n\n    // Open the DevTools.\n    // mainWindow.webContents.openDevTools()\n\n    // Emitted when the window is closed.\n    mainWindow.on('closed', function () {\n        // Dereference the window object, usually you would store windows\n        // in an array if your app supports multi windows, this is the time\n        // when you should delete the corresponding element.\n        mainWindow = null\n    });\n\n    mainWindowState.manage(mainWindow);\n    return mainWindow;\n}\n\n// This method will be called when Electron has finished\n// initialization and is ready to create browser windows.\n// Some APIs can only be used after this event occurs.\napp.on('ready', () => {\n    mainWindow = createWindow();\n    tray = createTrayIcon(mainWindow);\n});\n\n// Quit when all windows are closed.\napp.on('window-all-closed', function () {\n    // On OS X it is common for applications and their menu bar\n    // to stay active until the user quits explicitly with Cmd + Q\n    if (process.platform !== 'darwin') {\n        app.quit()\n    }\n});\n\napp.on('activate', function () {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (mainWindow === null) {\n        mainWindow.show();\n    }\n});\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and require them here.\n\n"],"sourceRoot":""}